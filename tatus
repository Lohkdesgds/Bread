[1mdiff --git a/bot/include/general_functions.hpp b/bot/include/general_functions.hpp[m
[1mindex 94fc99b..f72179b 100644[m
[1m--- a/bot/include/general_functions.hpp[m
[1m+++ b/bot/include/general_functions.hpp[m
[36m@@ -6,26 +6,27 @@[m
 #include <console.h>[m
 #include <bomb.h>[m
 [m
[31m-#include <general_config.hpp>[m
[31m-#include <safe_template.hpp>[m
[31m-#include <slashing.hpp>[m
[31m-#include <defaults.hpp>[m
[31m-#include <timed_factory.hpp>[m
[31m-#include <user_info.hpp>[m
[32m+[m[32m#include <bot.hpp>[m
 [m
 #include <functional>[m
 [m
 using namespace Lunaris;[m
 [m
 enum class commands{ NONE = -1, HELP, EXIT, SETSTATUSSTR, SETSTATUSMODE, SETSTATUSCODE, SETSTATUSLINK, REQUESTGUILDLIST, REQUESTGUILDSNOWFLAKE, REQUESTUSERSNOWFLAKE, RESETSLASHCOMMANDS, MEMSTATUS };[m
[32m+[m[32menum class discord_commands{ BOTSTATUS, CONFIGURATION, PASTE, PING, POINTS, POLL, RGBCONVERT, ROLES, SELF, STATS, TIME };[m
[32m+[m
[32m+[m[32mconst std::string confirm_emojis[] = {"â›”", "âœ…"};[m
 [m
 /// = = = = = timed/functional functions = = = = = ///[m
 void g_on_log(const dpp::log_t&);[m
 void g_on_ready(const dpp::ready_t&, safe_data<slash_global>&);[m
 void g_on_modal(const dpp::form_submit_t&);[m
[32m+[m[32mvoid g_on_button_click(const dpp::button_click_t&);[m
[32m+[m[32mvoid g_on_select(const dpp::select_click_t&);[m
[32m+[m[32mvoid g_on_interaction(const dpp::interaction_create_t&);[m
 void g_tick_presence(const safe_data<general_config>&, dpp::cluster&);[m
 void g_apply_guild_local_commands(dpp::cluster&, const safe_data<std::vector<slash_local>>&);[m
[31m-void input_handler_cmd(dpp::cluster&, bool&, safe_data<general_config>&, safe_data<std::vector<slash_local>>&, const safe_data<slash_global>&, const std::string&, const timed_factory<dpp::snowflake, user_info>&);[m
[32m+[m[32mvoid input_handler_cmd(dpp::cluster&, bool&, safe_data<general_config>&, safe_data<std::vector<slash_local>>&, const safe_data<slash_global>&, const std::string&);[m
 [m
 /// = = = = = useful user-like functions = = = = = ///[m
 void lock_indefinitely();[m
[36m@@ -35,11 +36,19 @@[m [mstd::string g_transl_nsfw_code(const dpp::guild_nsfw_level_t&);[m
 std::string g_smash_guild_info(const dpp::guild&);[m
 [m
 /// = = = = = setup bot functions = = = = = ///[m
[31m-void setup_bot(dpp::cluster&, safe_data<slash_global>&, timed_factory<dpp::snowflake, user_info>&);[m
[32m+[m[32mvoid setup_bot(dpp::cluster&, safe_data<slash_global>&);[m
 [m
 /// = = = = = assist funcs = = = = = ///[m
[32m+[m[32mvoid error_autoprint(const dpp::confirmation_callback_t&);[m
 std::unique_ptr<dpp::cluster> build_bot_from(safe_data<general_config>&);[m
 template<typename T, typename K> bool find_json_autoabort(const nlohmann::json&, const T&, K&, std::function<void(const std::exception&)> = {});[m
 template<typename T, typename K> bool find_json_array_autoabort(const nlohmann::json&, const T&, K&, std::function<void(const std::exception&)> = {});[m
[32m+[m[32mbool change_component(std::vector<dpp::component>&, const std::string&, std::function<void(dpp::component&)>);[m
[32m+[m[32m// set emoji and type[m
[32m+[m[32mdpp::component make_boolean_button(const bool);[m
[32m+[m[32mdpp::component& set_boolean_button(const bool, dpp::component&);[m
[32m+[m[32mbool auto_handle_button_switch(const dpp::interaction_create_t&, const std::string&, std::function<void(dpp::component&)>);[m
[32m+[m[32mint64_t interpret_color(const std::string&);[m
[32m+[m[32mstd::string print_hex(const int64_t);[m
 [m
 #include <impl/general_functions.ipp>[m
\ No newline at end of file[m
[1mdiff --git a/bot/include/impl/general_functions.ipp b/bot/include/impl/general_functions.ipp[m
[1mindex f808870..597bc9e 100644[m
[1m--- a/bot/include/impl/general_functions.ipp[m
[1m+++ b/bot/include/impl/general_functions.ipp[m
[36m@@ -24,11 +24,10 @@[m [minline bool find_json_autoabort(const nlohmann::json& json, const T& key, K& to,[m
 template<typename T, typename K>[m
 inline bool find_json_array_autoabort(const nlohmann::json& json, const T& key, K& to, std::function<void(const std::exception&)> errfunc)[m
 { [m
[31m-    if (!to) return false;[m
     auto jr = json.find(key);[m
     if (jr != json.end()) {[m
         try {[m
[31m-            for(auto it : jr) to.insert(to.end(), it);[m
[32m+[m[32m            for(auto it : *jr) to.insert(to.end(), it);[m
             return true;[m
         }[m
         catch(const std::exception& e) {[m
[1mdiff --git a/bot/include/impl/timed_factory.ipp b/bot/include/impl/timed_factory.ipp[m
[1mindex d6c2c6a..b9779b9 100644[m
[1m--- a/bot/include/impl/timed_factory.ipp[m
[1m+++ b/bot/include/impl/timed_factory.ipp[m
[36m@@ -35,7 +35,7 @@[m [minline std::shared_ptr<VarType> timed_factory<Key, VarType>::operator[](const Ke[m
     if (it != objs.end()) return it->second.var;[m
 [m
     mem mm(delta_for_kill);[m
[31m-    std::shared_ptr<VarType> cpy = std::make_shared<VarType>();[m
[32m+[m[32m    std::shared_ptr<VarType> cpy = std::make_shared<VarType>(k);[m
     mm.var = cpy;[m
     objs.insert({k, std::move(mm)});[m
 [m
[1mdiff --git a/bot/include/user_info.hpp b/bot/include/user_info.hpp[m
[1mindex 96c4f8d..9402f62 100644[m
[1m--- a/bot/include/user_info.hpp[m
[1m+++ b/bot/include/user_info.hpp[m
[36m@@ -5,8 +5,7 @@[m
 #include <dpp/fmt/format.h>[m
 #include <console.h>[m
 #include <bomb.h>[m
[31m-[m
[31m-#include <general_functions.hpp>[m
[32m+[m[32m#include <defaults.hpp>[m
 [m
 struct user_info {[m
     using mull = unsigned long long;[m
[36m@@ -45,4 +44,9 @@[m [mstruct user_info {[m
 [m
     nlohmann::json to_json() const;[m
     void from_json(const nlohmann::json&);[m
[32m+[m
[32m+[m[32m    // ======== automatic things ======== //[m
[32m+[m[32m    const dpp::snowflake __user_id;[m
[32m+[m[32m    user_info(const dpp::snowflake&);[m
[32m+[m[32m    ~user_info();[m
 };[m
\ No newline at end of file[m
[1mdiff --git a/bot/src/general_functions.cpp b/bot/src/general_functions.cpp[m
[1mindex 81bc425..4495e61 100644[m
[1m--- a/bot/src/general_functions.cpp[m
[1m+++ b/bot/src/general_functions.cpp[m
[36m@@ -31,7 +31,122 @@[m [mvoid g_on_ready(const dpp::ready_t& ev, safe_data<slash_global>& sg)[m
 [m
 void g_on_modal(const dpp::form_submit_t& ev)[m
 {[m
[31m-    ev.reply("All good m8!");[m
[32m+[m[32m    const auto you = tf_user_info[ev.command.usr.id];[m
[32m+[m[32m    if (!you) {[m
[32m+[m[32m        ev.reply("Something went wrong! You do not exist?! Please report error! I'm so sorry.");[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    if (ev.custom_id == "user-pref_color") {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const std::string val = std::get<std::string>(ev.components[0].components[0].value);[m
[32m+[m[32m            const int64_t sel = interpret_color(val);[m
[32m+[m[41m            [m
[32m+[m[32m            auto_handle_button_switch(ev, ev.custom_id, [&](dpp::component& it){[m
[32m+[m[32m                you->pref_color = sel;[m
[32m+[m[32m                it.set_label("Profile color: " + (you->pref_color < 0 ? "DEFAULT" : print_hex(you->pref_color)));[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        catch(...) {[m
[32m+[m[32m            ev.reply("Sorry, something went wrong! I'm so sorry.");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid g_on_button_click(const dpp::button_click_t& ev)[m
[32m+[m[32m{[m
[32m+[m[32m    const auto you = tf_user_info[ev.command.usr.id];[m
[32m+[m[32m    if (!you) {[m
[32m+[m[32m        ev.reply("Something went wrong! You do not exist?! Please report error! I'm so sorry.");[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (ev.custom_id == "user-show_level_up_messages")[m
[32m+[m[32m    {[m
[32m+[m[32m        auto_handle_button_switch(ev, ev.custom_id, [&](dpp::component& it){[m
[32m+[m[32m            you->show_level_up_messages = !you->show_level_up_messages;[m
[32m+[m[32m            set_boolean_button(you->show_level_up_messages, it);[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (ev.custom_id == "user-pref_color")[m
[32m+[m[32m    {[m
[32m+[m[32m        dpp::interaction_modal_response modal("user-pref_color", "Select color");[m
[32m+[m[32m        modal.add_component([m
[32m+[m[32m            dpp::component()[m
[32m+[m[32m                .set_label("What color best describes you?")[m
[32m+[m[32m                .set_id("color")[m
[32m+[m[32m                .set_type(dpp::cot_text)[m
[32m+[m[32m                .set_placeholder("red, green, blue, yellow, magenta, cyan, white, black, default, 0xHEXAHERE or DECIMAL")[m
[32m+[m[32m                .set_min_length(1)[m
[32m+[m[32m                .set_max_length(20)[m
[32m+[m[32m                .set_text_style(dpp::text_short)[m
[32m+[m[32m        );[m
[32m+[m[32m        ev.dialog(modal, error_autoprint);[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (ev.custom_id == "user-download_user_data")[m
[32m+[m[32m    {[m
[32m+[m[32m        dpp::message msg;[m
[32m+[m[32m        msg.set_content("Your user data:");[m
[32m+[m[32m        msg.add_file("user_data.json", you->to_json().dump(2));[m
[32m+[m[32m        msg.set_flags(64);[m
[32m+[m[32m        ev.reply(msg, error_autoprint);[m
[32m+[m[32m    }[m
[32m+[m[32m    else {[m
[32m+[m[32m        ev.reply(dpp::ir_update_message, "This interaction is unknown. Please try again later!", error_autoprint);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid g_on_select(const dpp::select_click_t& ev)[m
[32m+[m[32m{[m
[32m+[m[32m    const auto you = tf_user_info[ev.command.usr.id];[m
[32m+[m[32m    if (!you) {[m
[32m+[m[32m        ev.reply("Something went wrong! You do not exist?! Please report error! I'm so sorry.");[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m[41m    [m
[32m+[m
[32m+[m[32m    ev.reply("Unexpected command. How is this possible? Command id that failed: `" + ev.custom_id + "`.", error_autoprint);[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid g_on_interaction(const dpp::interaction_create_t& ev)[m
[32m+[m[32m{[m
[32m+[m[32m    //ev.thinking();[m
[32m+[m
[32m+[m[32m    const auto you = tf_user_info[ev.command.usr.id];[m
[32m+[m[32m    if (!you) {[m
[32m+[m[32m        ev.reply("Something went wrong! You do not exist?! Please report error! I'm so sorry.");[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    dpp::message msg(ev.command.channel_id, "Your configuration");[m
[32m+[m[32m    msg.add_component([m
[32m+[m[32m        dpp::component()[m
[32m+[m[32m            .add_component([m
[32m+[m[32m                make_boolean_button(you->show_level_up_messages)[m
[32m+[m[32m                .set_label("Level up messages?")[m
[32m+[m[32m                .set_id("user-show_level_up_messages")[m
[32m+[m[32m            )[m
[32m+[m[32m    );[m
[32m+[m[32m    msg.add_component([m
[32m+[m[32m        dpp::component()[m
[32m+[m[32m            .add_component(dpp::component()[m
[32m+[m[32m                .set_type(dpp::cot_button)[m
[32m+[m[32m                .set_label("Profile color: " + (you->pref_color < 0 ? "DEFAULT" : print_hex(you->pref_color)))[m
[32m+[m[32m                .set_style(dpp::cos_secondary)[m
[32m+[m[32m                .set_id("user-pref_color")[m
[32m+[m[32m            )[m
[32m+[m[32m    );[m
[32m+[m[32m    msg.add_component([m
[32m+[m[32m        dpp::component()[m
[32m+[m[32m            .add_component(dpp::component()[m
[32m+[m[32m                .set_type(dpp::cot_button)[m
[32m+[m[32m                .set_label("Download your data (DM)")[m
[32m+[m[32m                .set_style(dpp::cos_danger)[m
[32m+[m[32m                .set_id("user-download_user_data")[m
[32m+[m[32m            )[m
[32m+[m[32m    );[m
[32m+[m
[32m+[m[32m    ev.reply(msg, error_autoprint);[m
 }[m
 [m
 void g_tick_presence(const safe_data<general_config>& g, dpp::cluster& bot)[m
[36m@@ -54,7 +169,7 @@[m [mvoid g_apply_guild_local_commands(dpp::cluster& bot, const safe_data<std::vector[m
     });[m
 }[m
 [m
[31m-void input_handler_cmd(dpp::cluster& bot, bool& _keep, safe_data<general_config>& config, safe_data<std::vector<slash_local>>& lslashes, const safe_data<slash_global>& gslash, const std::string& cmd, const timed_factory<dpp::snowflake, user_info>& tusers)[m
[32m+[m[32mvoid input_handler_cmd(dpp::cluster& bot, bool& _keep, safe_data<general_config>& config, safe_data<std::vector<slash_local>>& lslashes, const safe_data<slash_global>& gslash, const std::string& cmd)[m
 {[m
     std::string arg;[m
     switch(g_interp_cmd(cmd, arg)) {[m
[36m@@ -251,7 +366,7 @@[m [mvoid input_handler_cmd(dpp::cluster& bot, bool& _keep, safe_data<general_config>[m
     case commands::MEMSTATUS:[m
     {[m
         cout << console::color::GREEN << "[MAIN] Data in memory (custom data):";[m
[31m-        cout << console::color::GREEN << "[MAIN] Users: " << tusers.size();[m
[32m+[m[32m        cout << console::color::GREEN << "[MAIN] Users: " << tf_user_info.size();[m
     }[m
         break;[m
     }[m
[36m@@ -304,36 +419,20 @@[m [mstd::string g_smash_guild_info(const dpp::guild& g)[m
         "SysCHID:" + std::to_string(g.system_channel_id) + "}";[m
 }[m
 [m
[31m-void setup_bot(dpp::cluster& bot, safe_data<slash_global>& sg, timed_factory<dpp::snowflake, user_info>& tu)[m
[32m+[m[32mvoid setup_bot(dpp::cluster& bot, safe_data<slash_global>& sg)[m
 {[m
     bot.on_log(g_on_log);[m
     bot.on_ready([&sg](const dpp::ready_t& arg){ g_on_ready(arg, sg); });[m
     bot.on_form_submit([&](const dpp::form_submit_t& arg){ g_on_modal(arg); });[m
[31m-    bot.on_interaction_create([&](const dpp::interaction_create_t& arg) { [m
[31m-        //arg.reply("Yoo I'm still in beta."); [m
[31m-        dpp::interaction_modal_response modal("0000", "Hello there");[m
[31m-        modal.add_component([m
[31m-            dpp::component()[m
[31m-                .set_label("This is a label")[m
[31m-                .set_id("thelabel")[m
[31m-                .set_type(dpp::cot_text)[m
[31m-                .set_placeholder("placeholding her")[m
[31m-                .set_min_length(1)[m
[31m-                .set_max_length(500)[m
[31m-                .set_text_style(dpp::text_paragraph)[m
[31m-        );[m
[31m-        //.add_row()[m
[31m-        //.add_component([m
[31m-        //    dpp::component()[m
[31m-        //        .set_label("THIS IS COOOOOL")[m
[31m-        //        .set_type(dpp::cot_selectmenu)[m
[31m-        //        .add_select_option(dpp::select_option("Option one", "Opt1Val", "This is the option 1"))[m
[31m-        //        .add_select_option(dpp::select_option("Option two", "Opt2Val", "This is the option 2"))[m
[31m-        //        .add_select_option(dpp::select_option("Option three", "Opt3Val", "This is the option 3"))[m
[31m-        //);[m
[31m-[m
[31m-        arg.dialog(modal, [](const dpp::confirmation_callback_t& conf){ if (conf.is_error()) cout << "DIALOG ERR: " << conf.http_info.body; });[m
[31m-    });[m
[32m+[m[32m    bot.on_button_click([&](const dpp::button_click_t& arg) { g_on_button_click(arg); });[m
[32m+[m[32m    bot.on_select_click([&](const dpp::select_click_t& arg) { g_on_select(arg); });[m
[32m+[m[32m    bot.on_interaction_create([&](const dpp::interaction_create_t& arg) { g_on_interaction(arg); });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid error_autoprint(const dpp::confirmation_callback_t& err)[m
[32m+[m[32m{[m
[32m+[m[32m    if (err.is_error())[m[41m [m
[32m+[m[32m        cout << console::color::RED << "Response error: " << err.http_info.body;[m
 }[m
 [m
 std::unique_ptr<dpp::cluster> build_bot_from(safe_data<general_config>& c)[m
[36m@@ -341,4 +440,76 @@[m [mstd::unique_ptr<dpp::cluster> build_bot_from(safe_data<general_config>& c)[m
     return c.csafe<std::unique_ptr<dpp::cluster>>([](const general_config& g) -> std::unique_ptr<dpp::cluster> {[m
         return std::unique_ptr<dpp::cluster>(new dpp::cluster(g.token, g.intents, g.shard_count));[m
     });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool change_component(std::vector<dpp::component>& vec, const std::string& key, std::function<void(dpp::component&)> doo)[m
[32m+[m[32m{[m
[32m+[m[32m    for(auto& i : vec){[m
[32m+[m[32m        if (i.custom_id == key) {[m
[32m+[m[32m            doo(i);[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else if (i.components.size()) {[m
[32m+[m[32m            if (change_component(i.components, key, doo)) return true;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    return false;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdpp::component make_boolean_button(const bool m)[m
[32m+[m[32m{[m
[32m+[m[32m    dpp::component _tmp;[m
[32m+[m[32m    set_boolean_button(m, _tmp);[m
[32m+[m[32m    return _tmp;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdpp::component& set_boolean_button(const bool m, dpp::component& d)[m
[32m+[m[32m{[m
[32m+[m[32m    return d[m
[32m+[m[32m        .set_emoji(confirm_emojis[static_cast<size_t>(m)])[m
[32m+[m[32m        .set_type(dpp::cot_button)[m
[32m+[m[32m        .set_style(m ? dpp::cos_success : dpp::cos_danger);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mbool auto_handle_button_switch(const dpp::interaction_create_t& ev, const std::string& key, std::function<void(dpp::component&)> f)[m
[32m+[m[32m{[m
[32m+[m[32m    dpp::message cpy = ev.command.msg;[m
[32m+[m[32m    const bool gud = change_component(cpy.components, key, f);[m
[32m+[m[32m    if (!gud) { ev.reply(dpp::ir_update_message, "This interaction failed. Please try again later!", error_autoprint); return false; }[m
[32m+[m[32m    ev.reply(dpp::ir_update_message, cpy, error_autoprint);[m
[32m+[m[32m    return true;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mint64_t interpret_color(const std::string& str)[m
[32m+[m[32m{[m
[32m+[m[32m    if (str.empty()) return -1;[m
[32m+[m
[32m+[m[32m    else if (str.find("0x") == 0) { // HEX[m
[32m+[m[32m        if (str.length() <= 2) return -1;[m
[32m+[m[32m        char* got_on = nullptr;[m
[32m+[m[32m        return std::strtoll(str.c_str() + 2, &got_on, 16);[m
[32m+[m[32m    }[m
[32m+[m[32m    else if (str[0] <= '9' && str[0] >= '0') { // DEC[m
[32m+[m[32m        char* got_on = nullptr;[m
[32m+[m[32m        return std::strtoll(str.c_str(), &got_on, 10);[m
[32m+[m[32m    }[m
[32m+[m[32m    else { // literal[m
[32m+[m[32m        if (str == "red") return 0xFF0000;[m
[32m+[m[32m        if (str == "green") return 0x00FF00;[m
[32m+[m[32m        if (str == "blue") return 0x0000FF;[m
[32m+[m[32m        if (str == "yellow") return 0xFFFF00;[m
[32m+[m[32m        if (str == "cyan") return 0x00FFFF;[m
[32m+[m[32m        if (str == "magenta") return 0xFF00FF;[m
[32m+[m[32m        if (str == "white") return 0xFFFFFF;[m
[32m+[m[32m        if (str == "black") return 0x000000;[m
[32m+[m[32m        if (str == "default") return -1;[m
[32m+[m[32m    }[m
[32m+[m[32m    return -1;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mstd::string print_hex(const int64_t v)[m
[32m+[m[32m{[m
[32m+[m[32m    std::stringstream stream;[m
[32m+[m[32m    stream << std::hex << v;[m
[32m+[m[32m    return stream.str();[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/bot/src/main.cpp b/bot/src/main.cpp[m
[1mindex 7bbb0c6..a6cf9c8 100644[m
[1m--- a/bot/src/main.cpp[m
[1m+++ b/bot/src/main.cpp[m
[36m@@ -1,21 +1,4 @@[m
[31m-#include <dpp/dpp.h>[m
[31m-#include <dpp/nlohmann/json.hpp>[m
[31m-#include <dpp/fmt/format.h>[m
[31m-#include <sys/types.h>[m
[31m-#include <sys/stat.h>[m
[31m-#include <unistd.h>[m
[31m-#include <iostream>[m
[31m-[m
[31m-#include <console.h>[m
[31m-#include <bomb.h>[m
[31m-[m
[31m-#include <general_config.hpp>[m
[31m-#include <general_functions.hpp>[m
[31m-#include <safe_template.hpp>[m
[31m-#include <slashing.hpp>[m
[31m-#include <defaults.hpp>[m
[31m-#include <timed_factory.hpp>[m
[31m-#include <user_info.hpp>[m
[32m+[m[32m#include <bot.hpp>[m
 [m
 using namespace Lunaris;[m
 [m
[36m@@ -28,7 +11,6 @@[m [mint main()[m
     safe_data<general_config> config;[m
     safe_data<slash_global> gslash;[m
     safe_data<std::vector<slash_local>> lslashes;[m
[31m-    timed_factory<dpp::snowflake, user_info> tusers;[m
 [m
 [m
     if (!gslash.safe<bool>([](slash_global& s){ return s.load_from(slash_path); })) {[m
[36m@@ -64,13 +46,13 @@[m [mint main()[m
         lock_indefinitely();[m
     }[m
 [m
[31m-    setup_bot(*bot, gslash, tusers);[m
[32m+[m[32m    setup_bot(*bot, gslash);[m
 [m
     cout << console::color::GREEN << "[MAIN] Configuration loaded properly. Starting bot...";[m
 [m
     // prepare hard stuff[m
     auto presence_update_timer = bot->start_timer([&]{ g_tick_presence(config, *bot);}, 60);[m
[31m-    auto tusers_timer = bot->start_timer([&]{ tusers.free_freeable(); }, 60);[m
[32m+[m[32m    auto tusers_timer = bot->start_timer([&]{ tf_user_info.free_freeable(); }, 60);[m
 [m
     cout << console::color::AQUA << "[MAIN] Any help do 'help'";[m
 [m
[36m@@ -79,7 +61,7 @@[m [mint main()[m
     for(bool _keep = true; _keep && bot;) {[m
         std::string cmd;[m
         std::getline(std::cin, cmd);[m
[31m-        input_handler_cmd(*bot, _keep, config, lslashes, gslash, cmd, tusers);[m
[32m+[m[32m        input_handler_cmd(*bot, _keep, config, lslashes, gslash, cmd);[m
     }[m
     [m
     // close hard stuff[m
[1mdiff --git a/bot/src/user_info.cpp b/bot/src/user_info.cpp[m
[1mindex 370bd2a..2f339a3 100644[m
[1m--- a/bot/src/user_info.cpp[m
[1m+++ b/bot/src/user_info.cpp[m
[36m@@ -1,4 +1,5 @@[m
 #include <user_info.hpp>[m
[32m+[m[32m#include <general_functions.hpp>[m
 [m
 void user_info::clipboard_data::clear()[m
 {[m
[36m@@ -74,7 +75,31 @@[m [mvoid user_info::from_json(const nlohmann::json& j)[m
     find_json_autoabort(j, "pref_color", pref_color);[m
     find_json_autoabort(j, "times_they_got_positive_points", times_they_got_positive_points);[m
     find_json_autoabort(j, "times_they_got_negative_points", times_they_got_negative_points);[m
[31m-    find_json_autoabort(j, "clipboard", clipboard);[m
[32m+[m[32m    if (j.contains("clipboard")) clipboard.from_json(j["clipboard"]);[m
     find_json_autoabort(j, "show_level_up_messages", show_level_up_messages);[m
     find_json_array_autoabort(j, "points_per_guild", points_per_guild);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32muser_info::user_info(const dpp::snowflake& id)[m
[32m+[m[32m    : __user_id(id)[m
[32m+[m[32m{[m
[32m+[m[32m    std::ifstream cfile(needed_paths[user_props::user_path_off] + std::to_string(__user_id));[m
[32m+[m[32m    if (!cfile.is_open() || !cfile.good()) return;[m
[32m+[m
[32m+[m[32m    std::stringstream buffer;[m
[32m+[m[32m    buffer << cfile.rdbuf();[m
[32m+[m[32m    const auto js = nlohmann::json::parse(buffer.str(), nullptr, false);[m
[32m+[m
[32m+[m[32m    from_json(js);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32muser_info::~user_info()[m
[32m+[m[32m{[m
[32m+[m[32m    std::ofstream cfile(needed_paths[user_props::user_path_off] + std::to_string(__user_id));[m
[32m+[m[32m    if (!cfile.is_open() || !cfile.good()) {[m
[32m+[m[32m        cout << console::color::RED << "FATAL ERROR: Can't save user #" << __user_id;[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    cfile << to_json();[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/libs/DPP b/libs/DPP[m
[1mindex bb4c42e..3ba3da6 160000[m
[1m--- a/libs/DPP[m
[1m+++ b/libs/DPP[m
[36m@@ -1 +1 @@[m
[31m-Subproject commit bb4c42ed69042fc0d7cf6ae61a360d0d49c5bc2f[m
[32m+[m[32mSubproject commit 3ba3da66b986ca530e78281276206fc37b193538-dirty[m
